    lua_need_request_body on;

    location ~ ^/scratch-assets/.+/get/?$ {
      alias /www/scratch-assets/;
      index index.html;

      rewrite ^/scratch-assets/(.+)/get/?$ /scratch-assets/$1 last;
    }

    location ~ ^/scratch-assets/upload/(.+)$ {
      set $filename $1;
      # set $store_dir  "/www/scratch-assets/internalapi/asset/";
      set $store_dir  "/www/scratch-assets/upload_assets/internalapi/asset/";
      set $corsHost "";
      if ($http_origin ~* ^(https?://[^/]*(\.plzhjy\.cn):?\d*)) {
          set $corsHost $1;
      }

      add_header Access-Control-Allow-Origin $corsHost always;
      add_header Cache-Control 'no-cache, no-store, must-revalidate' always;
      # add_header expires '-1s' always;
      # add_header Access-Control-Max-Age 0 always;
      add_header Access-Control-Allow-Credentials 'true' always;
      add_header Access-Control-Allow-Methods 'GET, POST, PUT, DELETE, OPTIONS' always;
      add_header Access-Control-Allow-Headers 'token,Authorization,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,X-File-Name,nonce-str,time,sign' always;

      if ($request_method = 'OPTIONS') {
        return 200;
      }

      # content_by_lua_file "/usr/local/openresty/nginx/conf/scratch_upload.lua";
      # content_by_lua_file "/usr/local/openresty/nginx/conf/scratch_upload_origin.lua";
      content_by_lua_file "/usr/local/openresty/nginx/conf/scratch_upload_body.lua";
    }

    location ~ ^/scratch-assets/(.+)$ {
      alias /www/scratch-assets/;
      index index.html;
      set $filename $1;
      try_files /origin_assets/$filename /upload_assets/$filename =404;

      add_header Access-Control-Allow-Origin $http_origin always;
      add_header Access-Control-Allow-Origin $corsHost always;
      # 一定要设置成不缓存，不然他们会傻的，请求不了。
      add_header Cache-Control 'no-cache, no-store, must-revalidate' always;
      # add_header expires '-1s' always;
      # add_header Access-Control-Max-Age 0 always;
      add_header Access-Control-Allow-Credentials 'true' always;
      add_header Access-Control-Allow-Methods 'GET, POST, PUT, DELETE, OPTIONS' always;
      add_header Access-Control-Allow-Headers 'token,Authorization,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,X-File-Name,nonce-str,time,sign' always;

      if ($request_method = 'OPTIONS') {
        return 200;
      }
    }

    location / {
      root /www/uploader;
      add_header Access-Control-Allow-Origin $http_origin always;
      add_header Access-Control-Max-Age 86400 always;
      add_header Access-Control-Allow-Credentials 'true' always;
      add_header Access-Control-Allow-Methods 'GET, POST, PUT, DELETE, OPTIONS' always;
      add_header Access-Control-Allow-Headers 'token,Authorization,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,X-File-Name' always;

      if ($request_method = 'OPTIONS') {
        return 200;
      }

      try_files /config.json =404;
    }

    location /group {
      set $h "";
      if ($arg_rename) {
          set $h "attachment;filename=$arg_rename";
      }
      add_header Content-Disposition $h;
      ngx_fastdfs_module;
    }

    location @image_server {
        content_by_lua_file "/usr/local/openresty/nginx/conf/server_image.lua";
    }

    location ~* ^(.+/([^/]+)\.(jpg|jpeg|gif|png|webp))_(\d+)+x(\d+)+$ {
        root $thumb_path;
        default_type image/png;

        set $path $1;    # origin_img file path
        set $filename $2;
        set $ext $3;    # file ext
        set $width $4;    # img width
        set $height $5;    # height

        try_files "/${filename}.${ext}_${width}x${height}" @image_server;
    }

    location /upload {
      set $corsHost "";
      if ($http_origin ~* ^(https?://[^/]*(\.plzhjy\.cn):?\d*)) {
          set $corsHost $1;
      }

      add_header Access-Control-Allow-Origin $corsHost always;
      add_header Access-Control-Max-Age 8640000;
      #add_header Cache-Control 'no-cache, no-store, must-revalidate' always;
      add_header Access-Control-Allow-Credentials 'true' always;
      add_header Access-Control-Allow-Methods 'GET, POST, PUT, DELETE, OPTIONS' always;
      add_header Access-Control-Allow-Headers 'token,Authorization,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,X-File-Name,nonce-str,time,sign' always;

      if ($request_method = 'OPTIONS') {
        return 200;
      }

      proxy_connect_timeout 6s;
      proxy_read_timeout 6s;
      proxy_http_version 1.1;
      proxy_set_header Connection "";
      proxy_pass http://127.0.0.1:8080;
    }

    error_page   500 502 503 504  /50x.html;

    location = /50x.html {
      root   html;
    }
